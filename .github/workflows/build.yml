name: Build and Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
    Windows:
    name: Windows
    runs-on: windows-latest

    strategy:
      matrix:
        goos: [windows]
        goarch: [amd64, arm64]  # 为 Windows 添加 x86 和 ARM64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go 1.22.6
        uses: actions/setup-go@v3
        with:
          go-version: '1.22.6'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            **/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: |
          mkdir -p output
          $env:GOARCH="${{ matrix.goarch }}"  # 设置 GOARCH 环境变量
          $env:GOOS="${{ matrix.goos }}"      # 设置 GOOS 环境变量
          go build -o output/CloudflareST-${{ matrix.goarch }}.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: CloudflareST-${{ matrix.goarch }}-windows
          path: ./output/CloudflareST-${{ matrix.goarch }}.exe

  Linux:
    name: Linux
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]  # 为 Linux 添加 x86 和 ARM64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go 1.22.6
        uses: actions/setup-go@v3
        with:
          go-version: '1.22.6'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            **/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: |
          mkdir -p output
          GOARCH=${{ matrix.goarch }} GOOS=${{ matrix.goos }} go build -o output/CloudflareST-${{ matrix.goarch }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: CloudflareST-${{ matrix.goarch }}-linux
          path: ./output/CloudflareST-${{ matrix.goarch }}

  release:
    name: Release
    needs: [Windows, Linux]
    runs-on: ubuntu-latest

    steps:
      - name: Download Windows Artifact (x86)
        uses: actions/download-artifact@v3
        with:
          name: CloudflareST-amd64-windows
          path: output/

      - name: Download Windows Artifact (ARM)
        uses: actions/download-artifact@v3
        with:
          name: CloudflareST-arm64-windows
          path: output/

      - name: Download Linux Artifact (x86)
        uses: actions/download-artifact@v3
        with:
          name: CloudflareST-amd64-linux
          path: output/

      - name: Download Linux Artifact (ARM)
        uses: actions/download-artifact@v3
        with:
          name: CloudflareST-arm64-linux
          path: output/

      - name: Generate Unique Tag
        id: generate_tag
        run: echo "RELEASE_TAG=v1.0.0-${{ github.run_id }}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ env.RELEASE_TAG }}
          body: "Release body"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows x86 Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/CloudflareST-amd64.exe
          asset_name: CloudflareST.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows ARM Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/CloudflareST-arm64.exe
          asset_name: CloudflareST-ARM.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux x86 Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/CloudflareST-amd64
          asset_name: CloudflareST
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux ARM Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/CloudflareST-arm64
          asset_name: CloudflareST-ARM
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
